require:
  - rubocop-rspec
  - rubocop-rails

AllCops:
  TargetRubyVersion: 2.6
  EnabledByDefault: true
  DisplayCopNames: true
  Exclude:
    - 'bin/**/*'
    - 'db/**/*'
    - 'vendor/**/*'
    - 'config/**/*'
    - 'docs/**/*'
    - 'app/channels/**/*'
    - 'script/**/*'
    - 'lib/assets/**/*'
    - 'Rakefile'
    - 'Gemfile'
    - 'Guardfile'
    - '*.yml'
    - '.pryrc'

# https://docs.rubocop.org/rubocop/1.10/cops_layout.html#layoutclassstructure
Layout/ClassStructure:
  Enabled: true

# Commonly used screens these days easily fit more than 80 characters.
Layout/LineLength:
  Max: 120

# No space makes the method definition shorter and differentiates
# from a regular assignment.
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# Most readable form.
Layout/HashAlignment:
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table

# Indenting the chained dots beneath each other is not supported by this cop,
# see https://github.com/bbatsov/rubocop/issues/1633
Layout/MultilineOperationIndentation:
  Enabled: false

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/SuppressedException:
  Enabled: false

Layout/SpaceInsideBlockBraces:
  # The space here provides no real gain in readability while consuming
  # horizontal space that could be used for a better parameter name.
  # Also {| differentiates better from a hash than { | does.
  SpaceBeforeBlockParameters: false

# No trailing space differentiates better from the block:
# foo} means hash, foo } means block.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space

# Exclude RSpec
Metrics/BlockLength:
  ExcludedMethods: ['describe', 'context']

# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500

# Check with yard instead.
Style/DocumentationMethod:
  Enabled: false

Style/Copyright:
  Enabled: false

Style/Documentation:
  Enabled: false

# We are using DateTime extensively.
Style/DateTime:
  Enabled: false

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/MissingElse
Style/MissingElse:
  Enabled: false

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/StringHashKeys
Style/StringHashKeys:
  Enabled: false

# Single quotes being faster is hardly measurable and only affects parse time.
# Enforcing double quotes reduces the times where you need to change them
# when introducing an interpolation. Use single quotes only if their semantics
# are needed.
Style/StringLiterals:
  EnforcedStyle: double_quotes

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashEachMethods
Style/HashEachMethods:
  Enabled: true

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashTransformKeys
Style/HashTransformKeys:
  Enabled: false

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/HashTransformValues
Style/HashTransformValues:
  Enabled: false

# has_key? and has_value? are far more readable than key? and value?
Style/PreferredHashMethods:
  Enabled: false

# https://docs.rubocop.org/rubocop/cops_style.html#styledisablecopswithinsourcecodedirective
Style/DisableCopsWithinSourceCodeDirective:
  Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # find is not equivalent on mongoid embeds or collections
    find: "detect"
    # inject seems more common in the community.
    reduce: "inject"

# Either allow this style or don't. Marking it as safe with parenthesis
# is silly. Let's try to live without them for now.
Style/ParenthesesAroundCondition:
  AllowSafeAssignment: false

# https://github.com/rubocop-hq/rubocop/blob/master/config/default.yml#L3095
# https://getdutchie.slack.com/archives/CJQCWSWQ4/p1592860363429600
# Optional inline and required multi
Style/MethodCallWithArgsParentheses:
  Description: 'Use parentheses for method calls with arguments.'
  StyleGuide: '#method-invocation-parens'
  Enabled: false
  VersionAdded: '0.47'
  VersionChanged: '0.61'
  IgnoreMacros: true
  IgnoredMethods: []
  IgnoredPatterns: []
  IncludedMacros: []
  AllowParenthesesInMultilineCall: false
  AllowParenthesesInChaining: false
  AllowParenthesesInCamelCaseMethod: false
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - omit_parentheses

Style/MethodCallWithoutArgsParentheses:
  Description: 'Do not use parentheses for method calls with no arguments.'
  StyleGuide: '#method-invocation-parens'
  Enabled: true
  IgnoredMethods: []
  VersionAdded: '0.47'
  VersionChanged: '0.55'

# A specialized exception class will take one or more arguments and construct the message from it.
# So both variants make sense.
Style/RaiseArgs:
  Enabled: false

  # Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Style preference
Style/MethodDefParentheses:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/Debugger
# Show linting errors on debugger/binding.pry even in development
Lint/Debugger:
  Enabled: true

Lint/AssignmentInCondition:
  AllowSafeAssignment: false

# https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Lint/NumberConversion
Lint/NumberConversion:
  Enabled: false

Naming/BinaryOperatorParameterName:
  Enabled: false

Lint/ConstantResolution:
  Enabled: false


# Rails
Rails/SaveBang:
  Enabled: false

# Temporarily removing until Mongoid is no more...
# Mongoid #find_by raises an exception if it can't be found, unlike AR #find_by, so .where().first is preferred
# Rubocop can't tell the difference between the two
Rails/FindBy:
  Enabled: false
  Include:
    - app/**/*.rb

# RSpec
RSpec/AlignLeftLetBrace:
  Enabled: true

RSpec/AlignRightLetBrace:
  Enabled: false

RSpec/MultipleMemoizedHelpers:
  Max: 10

RSpec/NestedGroups:
  Max: 5
